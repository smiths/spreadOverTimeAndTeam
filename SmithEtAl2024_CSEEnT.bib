%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Spencer Smith at 2024-09-17 08:57:49 -0400 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{Smith2005,
	address = {Markham, Ontario},
	author = {W. Spencer Smith},
	booktitle = {Proceedings of the CASCON Workshops, Second International Workshop on Software Engineering Course Projects (SECP 2005)},
	date-added = {2024-09-17 08:57:11 -0400},
	date-modified = {2024-09-17 08:57:11 -0400},
	title = {Teaching Capstone Software Design Project Courses: Issues and Challenges},
	url = {https://www-927.ibm.com/ibm/cas/cascon/index.shtml (last accesed November 28, 2005)},
	year = {2005},
	bdsk-url-1 = {https://www-927.ibm.com/ibm/cas/cascon/index.shtml%20(last%20accesed%20November%2028,%202005)}}

@inproceedings{bastarricaWhatCanStudents2017,
  title = {What {{Can Students Get}} from a {{Software Engineering Capstone Course}}?},
  booktitle = {2017 {{IEEE}}/{{ACM}} 39th {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training Track}} ({{ICSE-SEET}})},
  author = {Bastarrica, Mar{\'i}a Cecilia and Perovich, Daniel and Samary, Ma{\'i}ra Marques},
  year = {2017},
  month = may,
  pages = {137--145},
  doi = {10.1109/ICSE-SEET.2017.15},
  urldate = {2024-09-16},
  abstract = {For the last ten years we have been teaching a capstone course for fifth year students of the Computer Science Department of the Universidad de Chile. Five year ago we redesigned the course, shifting from projects following a waterfall process and focused on technical aspects, to one centered in soft skills following agile practices. Since then, we provide out students a concrete learning outcome: to internalize how relevant is having and developing critical soft skills to succeed in projects. Last year, we wondered whether our students were actually getting what we declared. We conducted a survey on students' initial and final perception about the relative value and difficulty of different dimensions involved in their projects: technical challenge, teamwork, planning, and negotiation with the client. Also, we applied a one-tailed dependent pair sample t-test to determine the statistical significance of the surveys result. We found out that the relative value of soft skills grows while that of the technical challenge drops, and that the students find that planning and teamwork are harder than they expected. Also, we found statistically significant evidence that, for the soft skills we have measured, the perceived relative relevance actually changes throughout the course.},
  keywords = {capstone course,Computer science,computer science education,Documentation,Education,Planning,Software,Software engineering,software engineering education,Teamwork}
}

@article{coelhoThisGitHubProject2020,
  title = {Is This {{GitHub}} Project Maintained? {{Measuring}} the Level of Maintenance Activity of Open-Source Projects},
  shorttitle = {Is This {{GitHub}} Project Maintained?},
  author = {Coelho, Jailton and Valente, Marco Tulio and Milen, Luciano and Silva, Luciana L.},
  year = {2020},
  month = jun,
  journal = {Information and Software Technology},
  volume = {122},
  pages = {106274},
  issn = {0950-5849},
  doi = {10.1016/j.infsof.2020.106274},
  urldate = {2024-09-16},
  abstract = {Context GitHub hosts an impressive number of high-quality OSS projects. However, selecting ``the right tool for the job'' is a challenging task, because we do not have precise information about those high-quality projects. Objective In this paper, we propose a data-driven approach to measure the level of maintenance activity of GitHub projects. Our goal is to alert users about the risks of using unmaintained projects and possibly motivate other developers to assume the maintenance of such projects. Method We train machine learning models to define a metric to express the level of maintenance activity of GitHub projects. Next, we analyze the historical evolution of 2927 active projects in the time frame of one year. Results From 2927 active projects, 16\% become unmaintained in the interval of one year. We also found that Objective-C projects tend to have lower maintenance activity than projects implemented in other languages. Finally, software tools---such as compilers and editors---have the highest maintenance activity over time. Conclusions A metric about the level of maintenance activity of GitHub projects can help developers to select open source projects.},
  keywords = {GitHub,Open source software,Unmaintained projects}
}

@inproceedings{connReusableAcademicstrengthMetricsbased2004,
  title = {A Reusable, Academic-Strength, Metrics-Based Software Engineering Process for Capstone Courses and Projects},
  booktitle = {Proceedings of the 35th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Conn, Richard},
  year = {2004},
  month = mar,
  pages = {492--496},
  publisher = {ACM},
  address = {Norfolk Virginia USA},
  doi = {10.1145/971300.971465},
  urldate = {2024-09-16},
  isbn = {978-1-58113-798-9},
  langid = {english}
}

@inproceedings{felicianoStudentExperiencesUsing2016,
  title = {Student Experiences Using {{GitHub}} in Software Engineering Courses: A Case Study},
  shorttitle = {Student Experiences Using {{GitHub}} in Software Engineering Courses},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Software Engineering Companion}}},
  author = {Feliciano, Joseph and Storey, Margaret-Anne and Zagalsky, Alexey},
  year = {2016},
  month = may,
  pages = {422--431},
  publisher = {ACM},
  address = {Austin Texas},
  doi = {10.1145/2889160.2889195},
  urldate = {2024-09-16},
  isbn = {978-1-4503-4205-6},
  langid = {english}
}

@inproceedings{ganExperienceReportUse2020,
  title = {Experience {{Report}} on the {{Use}} of {{Technology}} to {{Manage Capstone Course Projects}}},
  booktitle = {2020 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Gan, Benjamin Kok Siew and Ouh, Eng Lieh},
  year = {2020},
  month = oct,
  pages = {1--8},
  issn = {2377-634X},
  doi = {10.1109/FIE44824.2020.9274111},
  urldate = {2024-09-16},
  abstract = {This full paper presents an experience report describing lessons learnt from innovative practice use of technologies in an undergraduate computing capstone course. At our school, around fifty-five teams comprising of around 300 students take this course every year. With fifty-five teams, we needed a system to schedule presentations; improve communications; collaborate between stakeholders; share knowledge; monitor progress; team up students; match students to projects; improve grading process; showcase posters; and track improvements using analytics. The Learning Management Systems (LMS) is great to manage course content and grade submission. On the other hand, students are required to conduct agile sprint reviews with university internal and external stakeholders. The LMS forum requires external stakeholders to be registered and adhere to the university terms of use. Instead of using the LMS forum, we used a wiki. Wiki is a flexible platform used by various stakeholders to collaborate and contribute, we used it as a delivery platform for assessment as well. However, wiki lacks finer user access control and complex workflow features. In our capstone course we need workflows to schedule milestone presentations based on stakeholder's changing availabilities; to match students to teams using a content-based recommendation system; and to showcase project posters. We build custom systems to meet these workflow needs by proposing them as capstone course projects for our students. We share the lessons learnt from building custom systems. By sharing our experience, we hope to support more teachers willing to innovate in their use of technology in teaching.},
  keywords = {capstone course,Collaboration,Education,Electronic publishing,Information services,Internet,learning management systems,Stakeholders,teaching tools,Tools,wiki,workflow}
}

@misc{gitinabardStudentTeamworkProgramming2020,
  title = {Student {{Teamwork}} on {{Programming Projects}}: {{What}} Can {{GitHub}} Logs Show Us?},
  shorttitle = {Student {{Teamwork}} on {{Programming Projects}}},
  author = {Gitinabard, Niki and Okoilu, Ruth and Xu, Yiqao and Heckman, Sarah and Barnes, Tiffany and Lynch, Collin},
  year = {2020},
  month = aug,
  number = {arXiv:2008.11262},
  eprint = {2008.11262},
  primaryclass = {cs},
  publisher = {arXiv},
  urldate = {2024-09-16},
  abstract = {Teamwork, often mediated by version control systems such as Git and Apache Subversion (SVN), is central to professional programming. As a consequence, many colleges are incorporating both collaboration and online development environments into their curricula even in introductory courses. In this research, we collected GitHub logs from two programming projects in two offerings of a CS2 Java programming course for computer science majors. Students worked in pairs for both projects (one optional, the other mandatory) in each year. We used the students' GitHub history to classify the student teams into three groups, collaborative, cooperative, or solo-submit, based on the division of labor. We then calculated different metrics for students' teamwork including the total number and the average number of commits in different parts of the projects and used these metrics to predict the students' teamwork style. Our findings show that we can identify the students' teamwork style automatically from their submission logs. This work helps us to better understand novices' habits while using version control systems. These habits can identify the harmful working styles among them and might lead to the development of automatic scaffolds for teamwork and peer support in the future.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Computers and Society}
}

@inproceedings{hughstonEmpiricalStudyTeam2013,
  title = {An Empirical Study: {{Team}} Charters and Viability in Freshmen Engineering Design},
  shorttitle = {An Empirical Study},
  booktitle = {2013 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Hughston, Veronica Conway},
  year = {2013},
  month = oct,
  pages = {629--631},
  issn = {2377-634X},
  doi = {10.1109/FIE.2013.6684902},
  urldate = {2024-09-21},
  abstract = {While the concept of teams has been diffused into engineering education as an instructional activity for nearly two decades, questions remain about how best to provide instruction so that it supports student teams' effectiveness without compromising technical content. Additionally, employers in industry, government, and higher education have an insatiable need for engineers proficient in work that requires multi-disciplinary teams. The issue is further compounded by the sky-rocketing cost of education-students and families want an acceptable rate of return on their tuition. Administrators must determine how to increase value-adding coursework. Engineering education and team literature is replete with theoretical and descriptive studies focused on adding separate team-building courses to the already full and expensive mandatory class lists. Students and their families do not want to pay for more credits; they want more for their investment. To this end the current study looks at one facet of planning, team charter enactment, in relation to team effectiveness-operationalized as team viability within an existing freshmen design engineering course at a large Mid-Atlantic university.},
  keywords = {Cognitive science,Educational institutions,Engineering education,Psychology,Springs,team charter,team effectiveness,team viability,Teamwork,teamwork mental model similarity}
}

@article{johnsonTeamChartersHelp2022,
  title = {Do {{Team Charters Help Team-Based Projects}}? {{The Effects}} of {{Team Charters}} on {{Performance}} and {{Satisfaction}} in {{Global Virtual Teams}}},
  shorttitle = {Do {{Team Charters Help Team-Based Projects}}?},
  author = {Johnson, William H.A. and Baker, David S. and Dong, Longzhu and Taras, Vas and Wankel, Charles},
  year = {2022},
  month = jun,
  journal = {Academy of Management Learning \& Education},
  volume = {21},
  number = {2},
  pages = {236--260},
  issn = {1537-260X, 1944-9585},
  doi = {10.5465/amle.2020.0332},
  urldate = {2024-09-21},
  abstract = {In a sample of 1,891 teams (8,556 students) who completed an eight-week international business consulting project, half of the teams developed a team charter and half did not. Teams with charters saw improved process performance metrics only at the forming stage of team development. They also reported higher conflict levels. However, more conflict did not negatively affect peer evaluations or team output quality, suggesting that such conflict was not entirely negative. Team charter use was not directly associated with output quality, measured as the final report's grade. However, team national diversity moderated the solution creativity presented in the team's final report. These findings suggest team charters may initially aid process improvement but not necessarily the quality of output. We propose that the difference between the two groups studied is essentially one of formal written contracting versus informal psychological contracting, defined as a set of unwritten expectations of team members with regard to team behaviors and goals. These two forms of contracting provide for equifinality (the same result) in performance over the lifecycle of a project. The study contributes to research on team charter use, particularly with respect to formal versus informal psychological contracting within the context of global virtual teams.},
  langid = {english}
}

@article{liFollowNotFollow2023,
  title = {To {{Follow}} or {{Not}} to {{Follow}}: {{Understanding Issue}}/{{Pull-Request Templates}} on {{GitHub}}},
  shorttitle = {To {{Follow}} or {{Not}} to {{Follow}}},
  author = {Li, Zhixing and Yu, Yue and Wang, Tao and Lei, Yan and Wang, Ying and Wang, Huaimin},
  year = {2023},
  month = apr,
  journal = {IEEE Transactions on Software Engineering},
  volume = {49},
  number = {4},
  pages = {2530--2544},
  issn = {1939-3520},
  doi = {10.1109/TSE.2022.3224053},
  urldate = {2024-09-16},
  abstract = {For most Open Source Software (OSS) projects, issues and Pull-requests (PR) are the primary means by which stakeholders of a project report and discuss software problems and code changes, and their descriptions are important for people to understand them. To help ensure the informational quality of issue/PR descriptions, GitHub introduced the issue/PR template feature, which pre-populates the description for anyone trying to open a new issue/PR. To better understand this feature, we report on a large-scale, mixed-methods empirical study of templates that explores contents, impacts, and perceptions. Our results show that templates typically contain elements to greet contributors, explain project guidelines, and collect relevant information. After template adoption, the monthly volume of incoming issues and PRs decreases, and issues have fewer monthly discussion comments and longer resolution duration. Although both contributors and maintainers positively rated the usefulness of templates from various aspects, they also reported challenges in using templates (e.g., excessive and irrelevant information request) and suggested potential improvements of the template feature (e.g., better user interaction and advanced automation). This work contributes to the informed use and targeted improvement of templates to enhance OSS practitioners' collaboration and interaction.},
  keywords = {Behavioral sciences,Codes,Collaboration,Computer bugs,Documentation,GitHub,Guidelines,issue template,open source software,pull-request template,Software development management}
}

@article{mathieuLayingFoundationSuccessful2009,
  title = {Laying the Foundation for Successful Team Performance Trajectories: {{The}} Roles of Team Charters and Performance Strategies},
  shorttitle = {Laying the Foundation for Successful Team Performance Trajectories},
  author = {Mathieu, John E. and Rapp, Tammy L.},
  year = {2009},
  journal = {Journal of Applied Psychology},
  volume = {94},
  number = {1},
  pages = {90--103},
  publisher = {American Psychological Association},
  address = {US},
  issn = {1939-1854},
  doi = {10.1037/a0013257},
  abstract = {[Correction Notice: An erratum for this article was reported in Vol 95(4) of Journal of Applied Psychology (see record 2010-13313-007). In the article ``Laying the Foundation for Successful Team Performance Trajectories: The Roles of Team Charters and Performance Strategies,'' by John E. Mathieu and Tammy L. Rapp (Journal of Applied Psychology, 94, 90--103), the ``High Chart--Low Strategy'' and the ``Low Chart--High Strategy'' lines were inadvertently reversed in Figure 1. Below is the corrected version of Figure 1.] This study examined the influences of team charters and performance strategies on the performance trajectories of 32 teams of master's of business administration students competing in a business strategy simulation over time. The authors extended existing theory on team development by demonstrating that devoting time to laying a foundation for both teamwork (i.e., team charters) and taskwork (performance strategies) can pay dividends in terms of more effective team performance over time. Using random coefficients growth modeling techniques, they found that teams with high-quality performance strategies outperformed teams with poorer quality strategies. However, a significant interaction between quality of the charters of teams and their performance strategies was found, such that the highest sustained performances were exhibited by teams that were high on both features. (PsycINFO Database Record (c) 2017 APA, all rights reserved)},
  keywords = {Diversity,Group Performance,Teams,Transformational Leadership}
}

@inproceedings{mooreLearningDoingGoals1994,
  title = {Learning by Doing: {{Goals}} and Experiences of Two Software Engineering Project Courses},
  shorttitle = {Learning by Doing},
  booktitle = {Software {{Engineering Education}}},
  author = {Moore, Melody and Potts, Colin},
  editor = {{D{\'i}az-Herrera}, Jorge L.},
  year = {1994},
  pages = {151--164},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/BFb0017611},
  abstract = {In this paper, we describe two laboratory software engineering class series that are intended to teach the students `reflection-in-action.' We offer the labs at undergraduate and graduate levels, and we present our experience and results from eight project quarters.},
  isbn = {978-3-540-48191-1},
  langid = {english},
  keywords = {Group Project,Real Project,Software Engineering,Student Manager,Undergraduate Level}
}

@article{rasExperienceManagementWikis2007,
  title = {Experience {{Management Wikis}} for {{Reflective Practice}} in {{Software Capstone Projects}}},
  author = {Ras, Eric and Carbon, Ralf and Decker, Bj{\"O}rn and Rech, {\relax J{\"o}}rg},
  year = {2007},
  month = nov,
  journal = {IEEE Transactions on Education},
  volume = {50},
  number = {4},
  pages = {312--320},
  issn = {1557-9638},
  doi = {10.1109/TE.2007.904580},
  urldate = {2024-09-16},
  abstract = {Software engineering curriculum guidelines state that students should practice methods, techniques, and tools. A capstone project is one possibility to address this aim. A capstone project helps the students to increase their problem solving competencies, improve their social skills (e.g., communication skills), and gather practical experience. A crux of such projects is that students perform ldquoreflectiverdquo practice in order to learn from their experiences. The authors believe that experience gathering and reuse are effective techniques to stimulate reflective activities. An adapted free- and open-source Wiki-based system called software organization platform (SOP) is used to support students in managing their observations and experiences. The system can be used for experience exchange within the team and for experience reuse in forthcoming projects. The results of a case study show that standard Wiki functions improve communication and information sharing by means of explicit observation and experience documentation. A total of 183 documented observations and experiences at the end of the project provide a measure for the amount of reflection students have had during the capstone project. Still, the advantages of using Wikis will decrease when no technical adaptations of the Wiki to the learning objectives and to the software engineering tasks are made. Limitations of the case study, future evaluation steps, and planned developments of SOP will be provided in this paper.},
  keywords = {Capstone project,experience management,Knowledge based systems,knowledge-based systems,Open source software,open-source software,reflection,software engineering,Software engineering}
}

@inproceedings{saadatAnalyzingProductivityGitHub2020,
  title = {Analyzing the {{Productivity}} of {{GitHub Teams}} Based on {{Formation Phase Activity}}},
  booktitle = {2020 {{IEEE}}/{{WIC}}/{{ACM International Joint Conference}} on {{Web Intelligence}} and {{Intelligent Agent Technology}} ({{WI-IAT}})},
  author = {Saadat, Samaneh and Newton, Olivia B. and Sukthankar, Gita and Fiore, Stephen M.},
  year = {2020},
  month = dec,
  pages = {169--176},
  doi = {10.1109/WIIAT50758.2020.00027},
  urldate = {2024-09-21},
  abstract = {Our goal is to understand the characteristics of high-performing teams on GitHub. Towards this end, we collect data from software repositories and evaluate teams by examining differences in productivity. Our study focuses on the team formation phase, the first six months after repository creation. To better understand team activity, we clustered repositories based on the proportion of their work activities and discovered three work styles in teams: toilers, communicators, and collaborators. Based on our results, we contend that early activities in software development repositories on GitHub establish coordination processes that enable effective collaborations over time.},
  keywords = {Cognition,Feature extraction,GitHub,Intelligent agents,Lead,Productivity,Software,software engineering productivity,team formation,Teamwork}
}

@inproceedings{stettinaAcademicEducationSoftware2013,
  title = {Academic Education of Software Engineering Practices: Towards Planning and Improving Capstone Courses Based upon Intensive Coaching and Team Routines},
  shorttitle = {Academic Education of Software Engineering Practices},
  booktitle = {2013 26th {{International Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE}}\&{{T}})},
  author = {Stettina, Christoph Johann and Zhou, Zhao and B{\"a}ck, Thomas and Katzy, Bernhard},
  year = {2013},
  month = may,
  pages = {169--178},
  issn = {2377-570X},
  doi = {10.1109/CSEET.2013.6595248},
  urldate = {2024-09-16},
  abstract = {Academic education of professional processes is challenged by a necessary balance of practical activities with academic reflection. In this paper we address this issue by discussing our experiences with teaching software engineering practices and their continuous improvement. By designing a graduate course we embed an intensive coaching routine based upon agile practices with research activities to leverage knowledge of students and coaches. As a concrete example of an embedded research project we conduct an experiment on the impact of two different meeting routines on the teams satisfaction with information exchange. Our results show that the intensive coaching in individual teams is shorter in nature and more appealing to the students. Our findings suggest that software engineering education can benefit from the notion of team routines and process improvement practices contributing to maturity of students and educators.},
  keywords = {Concrete,Educational institutions,Information exchange,Planning,Software,Software engineering}
}

@misc{sudhakarMeasuringProductivitySoftware2012,
  type = {{{SSRN Scholarly Paper}}},
  title = {Measuring {{Productivity}} of {{Software Development Teams}}},
  author = {Sudhakar, Goparaju and Farooq, Ayesha and Patnaik, Sanghamitra},
  year = {2012},
  number = {2425392},
  address = {Rochester, NY},
  urldate = {2024-09-21},
  abstract = {This paper gives an exhaustive literature review of the techniques and models available to measure the productivity of software development teams. Definition of productivity, measuring individual programmer's productivity, and measuring software development team productivity are discussed. Based on the literature review it was found that software productivity measurement can be done using SLOC (Source Lines of Code), function points, use case points, object points, and feature points. Secondary research findings indicate that the team size, response time, task complexity, team climate and team cohesion have an impact on software development team productivity. List of factors affecting the software development team productivity are studied and reviewed.},
  langid = {english},
  keywords = {managing information systems projects,productivity factors,software productivity,software teams,team productivity}
}

@article{sulunEmpiricalAnalysisIssue2024,
  title = {An {{Empirical Analysis}} of {{Issue Templates Usage}} in {{Large-Scale Projects}} on {{GitHub}}},
  author = {S{\"u}l{\"u}n, Emre and Sa{\c c}ak{\c c}{\i}, Metehan and T{\"u}z{\"u}n, Eray},
  year = {2024},
  month = jun,
  journal = {ACM Transactions on Software Engineering and Methodology},
  volume = {33},
  number = {5},
  pages = {1--28},
  issn = {1049-331X, 1557-7392},
  doi = {10.1145/3643673},
  urldate = {2024-09-16},
  abstract = {GitHub Issues is a widely used issue tracking tool in open-source software projects. Originally designed with broad flexibility, its lack of standardization led to incomplete issue reports, impeding software development and maintenance efficiency. To counteract this, GitHub introduced issue templates in 2016, which rapidly became popular. Our study assesses the current use and evolution of these templates in large-scale open-source projects and their impact on issue tracking metrics, including resolution time, number of reopens, and number of issue comments. Employing a comprehensive analysis of 350 templates from 100 projects, we also evaluated over 1.9 million issues for template conformity and impact. Additionally, we solicited insights from open-source software maintainers through a survey. Our findings highlight issue templates' extensive usage in 99 of the 100 surveyed projects, with a growing preference for YAML-based templates, a more structured template variant. Projects with a template exhibited markedly reduced resolution time (381.02 days to 103.18~days) and reduced issue comment count (4.95 to 4.32) compared to those without. The use of YAML-based templates further significantly decreased resolution time, the number of reopenings, and the discussion extent. Thus, our research underscores issue templates' positive impact on large-scale open-source projects, offering recommendations for improved effectiveness.},
  langid = {english}
}

@article{tenhunenSystematicLiteratureReview2023,
  title = {A Systematic Literature Review of Capstone Courses in Software Engineering},
  author = {Tenhunen, Saara and M{\"a}nnist{\"o}, Tomi and Luukkainen, Matti and Ihantola, Petri},
  year = {2023},
  publisher = {arXiv},
  doi = {10.48550/ARXIV.2301.03554},
  urldate = {2024-09-16},
  abstract = {Tertiary education institutions aim to prepare their computer science and software engineering students for working life. While much of the technical principles are covered in lower-level courses, team-based capstone projects are a common way to provide students with hands-on experience and teach soft skills. This paper explores the characteristics of software engineering capstone courses presented in the literature. The goal of this work is to understand the pros and cons of different approaches by synthesising the various aspects of software engineering capstone courses and related experiences. In a systematic literature review for 2007-2022, we identified 127 primary studies. These studies were analysed based on their presented course characteristics and the reported course outcomes. The characteristics were synthesised into a taxonomy consisting of duration, team sizes, client and project sources, project implementation, and student assessment. We found out that capstone courses generally last one semester and divide students into groups of 4-5 where they work on a project for a client. For a slight majority of courses, the clients are external to the course staff and students are often expected to produce a proof-of-concept level software product as the main end deliverable. The courses also offer versatile assessments for students throughout the project. This paper provides researchers and educators with a classification of characteristics of software engineering capstone courses based on previous research. We further synthesise insights on the reported outcomes of capstone courses. Our review study aims to help educators to identify various ways of organising capstones and effectively plan and deliver their own capstone courses. The characterisation also helps researchers to conduct further studies on software engineering capstones.},
  copyright = {arXiv.org perpetual, non-exclusive license},
  keywords = {Computers and Society (cs.CY),FOS: Computer and information sciences,K.3.2; D.2,Software Engineering (cs.SE)}
}

@article{tushevUsingGitHubLarge2020,
  title = {Using {{GitHub}} in Large Software Engineering Classes. {{An}} Exploratory Case Study},
  author = {Tushev, Miroslav and Williams, Grant and Mahmoud, Anas},
  year = {2020},
  month = apr,
  journal = {Computer Science Education},
  volume = {30},
  number = {2},
  pages = {155--186},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2019.1696168},
  urldate = {2024-09-16},
  langid = {english}
}

@article{vanhanenSoftwareEngineeringProblems2014,
  title = {Software {{Engineering Problems Encountered}} by {{Capstone Project Teams}}},
  author = {Vanhanen, Jari and Lehtinen, Timo O. A.},
  year = {2014},
  journal = {International Journal of Engineering Education},
  urldate = {2024-09-21},
  abstract = {Capstone projects are a common part of engineering education. In a capstone project, learning takes place mainly through solvingproblems during the project. Therefore, understanding what problems the capstone project teams encounter increasesunderstanding on what the students can learn. We collected problems encountered by eleven capstone project teams in a softwaredevelopment project course at Aalto University. Each team used a root cause analysis method twice during their project to identifythe problems and their cause-and-effect relationships. The number of identified problems was 103--247 per team. We analysed theproblems qualitatively and summarized them under the following four main topics: system functionality, system quality,communication and taking responsibility. The problems created opportunities for learning about software engineering. However, insome teams the problems worsened so much that they created educationally detrimental situations. For example, learning a newprogramming language from scratch is valuable for a student, but it may start taking too much attention from many othereducational aspects of the project. We give suggestions for mitigating the educationally detrimental situations in capstone projects.The suggestions include an iterative development process, team formation practicalities, reasonable project topics, customereducation, instructions on selecting and adopting crucial tools, emphasizing learning, and adding control to ensure the use of thedesired working practices. Our results help the teachers of similar courses in evaluating the potential that their courses have onreaching specific educational goals and in improving their courses by decreasing educationally detrimental situations.}
}

@article{xuUsingGitManage2012,
  title = {Using {{Git}} to {{Manage Capstone Software Projects}}},
  author = {Xu, Zhiguang},
  year = {2012},
  abstract = {Distributed software project development has become a reality not only in industry but also in computer science classes nowadays -- students and teachers have to leverage time, talent, and resources collaboratively wherever they reside, especially when everyone is working on his/her own schedule, from his/her convenient location, and using various programming systems. In this paper, we will present an empirical study of how Git, ``a free \& open source, distributed version control system'', is used in an undergraduate Computer Science (CS) capstone class to facilitate team collaboration for the students and to ease the project assessment and grading tasks for the teachers. Other Git-related aspects such as preventing plagiarization, hosting online public/private project repositories, and improving the student-teacher interactivity during lecture sessions, are also discussed. Despite of the relatively bumpy and steep learning curve in the beginning of the semester, all four groups of students in the capstone class described in this paper benefitted tremendously from Git, which reduced the burdens of version control and group management on their shoulders, increased the collective productivity of their groups, and helped them in completing their substantial software projects successfully. This paper is concluded with a vision on expanding and standardizing the adoption of Git in other Computer Science classes in the future.},
  langid = {english}
}

@article{zhangConsistentNotInvestigation2022,
  title = {Consistent or Not? {{An}} Investigation of Using {{Pull Request Template}} in {{GitHub}}},
  shorttitle = {Consistent or Not?},
  author = {Zhang, Mengxi and Liu, Huaxiao and Chen, Chunyang and Liu, Yuzhou and Bai, Shuotong},
  year = {2022},
  month = apr,
  journal = {Information and Software Technology},
  volume = {144},
  pages = {106797},
  issn = {0950-5849},
  doi = {10.1016/j.infsof.2021.106797},
  urldate = {2024-09-16},
  abstract = {Context: The arbitrary usage of pull requests in GitHub may bring many issues such as incomplete, verbose, and duplicated descriptions, which hinder the development and maintenance of the project. Thus, GitHub proposed the Pull Request Template (PRT) in 2016 so that developers could edit the pull request in a relevant consistent manner. However, whether the PRT has been widely applied to GitHub and what impact it might bring remain little known. Such uninformed cases may affect the efficiency of cooperative development. Objective: In this work, we conduct an empirical study on large-scale repositories to explore whether the PRT has been widely applied and what impact it can bring to the GitHub community. Method: This work aims to answer four research questions. The first is a statistical experiment with the aim of analyzing the current status of PRTs. The second is an explored experiment, which aims at probing which repositories are suitable to adopt the PRT. The third is the measurement evaluation experiment, focusing on discussing what impact the PRT can bring. The last is an online survey to explain why few PRTs have been adopted. Notably, both the second and third questions are conducted a mixed quantitative and qualitative analysis. Results and conclusion: In this work, we find that only 1.2\% of repositories contain the PRT in GitHub, and such repositories are mostly in high popularity and contain a large number of PRs. Besides, contributors are willing to accept the PRT that requires pivotal information, including description, test, and check\_list. Meanwhile, the PRT can assist developers to manage repositories, reflecting in less time for reviewing, fewer duplicated pull requests, and almost non-existentially invalid comments. Finally, we survey 527 well-reputed developers to explain why few repositories adopt the PRT, and further provide some actionable suggestions.},
  keywords = {Empirical software engineering,Github,Pull request,Pull request template}
}
